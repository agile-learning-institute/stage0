#!/bin/bash

# Color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print status messages
print_status() {
    echo -e "${GREEN}[+]${NC} $1"
}

# Function to print error messages
print_error() {
    echo -e "${RED}[!]${NC} $1"
}

# Function to print warning messages
print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

# Get the installation directory
# Handle both direct execution and PATH execution
if [[ -L "$0" ]]; then
    # If it's a symlink, follow it
    SCRIPT_PATH=$(readlink -f "$0")
else
    SCRIPT_PATH="$0"
fi

INSTALL_PATH=$(dirname "$SCRIPT_PATH")

# Check if docker-compose.yaml exists in the script directory
if [[ ! -f "$INSTALL_PATH/docker-compose.yaml" ]]; then
    print_error "docker-compose.yaml not found in $INSTALL_PATH"
    print_error "Please ensure the stage0 script and docker-compose.yaml are in the same directory"
    exit 1
fi

################################################################################
# Print Manual Page
################################################################################
function manual {
cat <<END
NAME
       stage0 - stage0 Developer Edition

SYNOPSIS
       stage0 COMMAND [PROFILE]

DESCRIPTION
       stage0 is a utility to run the stage0 application, or portions 
       of it, in local docker containers. You must have docker desktop 
       installed.

COMMANDS
    up [profile1,profile2,...]
        Launches the profile(s) specified.
        Start the system with a newly initialized database if not already running.

    down
        Remove existing containers. This will permanently delete the
        data in any existing databases.

    start
        Restart previously stopped profile.

    stop
        Stop currently running profile.

    logs [service]
        Show logs for a service or all services

    update
        Update the stage0 Developer Edition
        Pull a fresh copy of all containers

    clean
        Delete stage0-specific containers and images

    version
        Print the stage0-DE version
    
    list-profiles
        List all available profiles related to stage0-DE

    list-services
        List all available services

    uninstall
        Removes stage0-DE completely

EXAMPLES
    stage0 up all                    # Start all services
    stage0 up search,cat             # Start search and cat services
    stage0 down                      # Stop and remove all containers
    stage0 logs stage0_search_api    # Show logs for search API
    stage0 list-profiles             # List available profiles
END
}

################################################################################
# Print Usage
################################################################################
usage() {
  cat <<END

Usage: stage0 COMMAND [PROFILE]

Commands:
  up [profile]       Launch containers from a profile
  down               Remove existing containers
  start              Restart a profile
  stop               Stop a profile
  logs [service]     Show service logs
  update             Update the stage0 Developer Edition
  clean              Delete stage0-specific containers and images
  version            Print the stage0-DE version
  list-profiles      List all available profiles
  list-services      List all available services
  manual             Show the manual
  uninstall          Remove stage0 and all associated files

Examples:
  stage0 up all
  stage0 up search,cat
  stage0 logs stage0_search_api
END
}

################################################################################
# Make sure Docker is running
################################################################################
function check_docker {
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker Desktop."
        exit 1
    fi
}

################################################################################
# Build docker compose command with profiles
################################################################################
function build_compose_cmd {
    local profiles=("$@")
    local cmd=("docker" "compose" "--project-directory" "$INSTALL_PATH" "-f" "$INSTALL_PATH/docker-compose.yaml")
    
    for profile in "${profiles[@]}"; do
        cmd+=("--profile" "$profile")
    done
    
    echo "${cmd[@]}"
}

################################################################################
# List profiles
################################################################################
function list_profiles {
    print_status "Available profiles:"
    docker compose -f "$INSTALL_PATH/docker-compose.yaml" config --profiles | tr ' ' '\n' | sort
}

################################################################################
# List services
################################################################################
function list_services {
    print_status "Available services:"
    docker compose -f "$INSTALL_PATH/docker-compose.yaml" --profile '*' config --services | tr ' ' '\n' | sort
}

################################################################################
# Start services
################################################################################
function up_profile {
    local profiles=("$@")
    
    if [[ ${#profiles[@]} -eq 0 ]]; then
        print_error "No profile specified. Use 'stage0 list-profiles' to see available profiles."
        exit 1
    fi
    
    print_status "Starting profiles: ${profiles[*]}"
    
    local cmd
    cmd=$(build_compose_cmd "${profiles[@]}")
    
    if ! eval "$cmd up --detach"; then
        print_error "Failed to start services"
        exit 1
    fi
    
    # Save current profiles
    printf "%s\n" "${profiles[@]}" > "$INSTALL_PATH/CURRENT"
    print_status "Services started successfully"
}

################################################################################
# Stop and remove containers
################################################################################
function down_services {
    print_status "Stopping and removing all stage0 services..."
    docker compose -f "$INSTALL_PATH/docker-compose.yaml" --profile '*' down
    
    docker volume prune -f >/dev/null 2>&1
    rm -f "$INSTALL_PATH/CURRENT"
    print_status "All services stopped and removed"
}

################################################################################
# Stop services
################################################################################
function stop_services {
    print_status "Stopping all stage0 services..."
    docker compose -f "$INSTALL_PATH/docker-compose.yaml" --profile '*' stop
    print_status "All services stopped"
}

################################################################################
# Start services
################################################################################
function start_services {
    print_status "Starting all stage0 services..."
    docker compose -f "$INSTALL_PATH/docker-compose.yaml" --profile '*' start
    print_status "All services started"
}

################################################################################
# Show logs
################################################################################
function show_logs {
    local service="$1"
    
    if [[ -f "$INSTALL_PATH/CURRENT" ]]; then
        local profiles=()
        while IFS= read -r profile; do
            [[ -n "$profile" ]] && profiles+=("$profile")
        done < "$INSTALL_PATH/CURRENT"
        
        if [[ ${#profiles[@]} -gt 0 ]]; then
            local cmd
            cmd=$(build_compose_cmd "${profiles[@]}")
            
            if [[ -n "$service" ]]; then
                eval "$cmd logs -f \"$service\""
            else
                eval "$cmd logs -f"
            fi
        fi
    else
        print_warning "No services currently running"
    fi
}

################################################################################
# Update stage0
################################################################################
function update_stage0 {
    print_status "Updating stage0 Developer Edition..."
    
    # Stop current services
    down_services
    
    # Download latest files
    print_status "Downloading latest docker-compose.yaml..."
    if ! curl -sSL -o "$INSTALL_PATH/docker-compose.yaml" https://raw.githubusercontent.com/agile-learning-institute/stage0/main/developer_edition/docker-compose.yaml; then
        print_error "Failed to download docker-compose.yaml"
        exit 1
    fi
    
    print_status "Downloading latest stage0 script..."
    if ! curl -sSL -o "$INSTALL_PATH/stage0" https://raw.githubusercontent.com/agile-learning-institute/stage0/main/developer_edition/stage0; then
        print_error "Failed to download stage0 script"
        exit 1
    fi
    
    chmod +x "$INSTALL_PATH/stage0"
    
    # Pull latest images
    print_status "Pulling latest images..."
    docker compose -f "$INSTALL_PATH/docker-compose.yaml" --profile '*' config --images | while read -r image; do
        print_status "Pulling $image"
        docker pull "$image"
    done
    
    # Clean up
    docker image prune -f >/dev/null 2>&1
    
    print_status "Update completed successfully"
}

################################################################################
# Clean up
################################################################################
function clean_up {
    print_status "Cleaning up stage0 containers and images..."
    
    # Remove containers
    docker compose -f "$INSTALL_PATH/docker-compose.yaml" ps -a --format '{{ .Names }}' | while read -r container; do
        print_status "Removing container $container"
        docker container rm -f "$container" >/dev/null 2>&1
    done
    
    # Remove images
    docker compose -f "$INSTALL_PATH/docker-compose.yaml" --profile '*' config --images | while read -r image; do
        print_status "Removing image $image"
        docker image rm -f "$image" >/dev/null 2>&1
    done
    
    # Remove volumes
    docker volume ls | awk 'NR > 1 {print $2}' | while read -r volume; do
        print_status "Removing volume $volume"
        docker volume rm -f "$volume" >/dev/null 2>&1
    done
    
    rm -f "$INSTALL_PATH/CURRENT"
    print_status "Cleanup completed"
}

################################################################################
# Uninstall
################################################################################
function uninstall {
    print_status "Uninstalling stage0 Developer Edition..."
    clean_up
    rm -rf "$INSTALL_PATH"
    print_status "Uninstallation completed"
}

################################################################################
# Main execution
################################################################################

# Check Docker is running
check_docker

# Parse command line arguments
COMMAND="${1:-}"
PROFILE="${2:-}"

# Handle profile list for up command
if [[ "$COMMAND" == "up" && -n "$PROFILE" ]]; then
    IFS=',' read -ra PROFILES <<< "$PROFILE"
else
    PROFILES=()
fi

# Execute command
case "$COMMAND" in
    "up")
        up_profile "${PROFILES[@]}"
        ;;
    "down")
        down_services
        ;;
    "start")
        start_services
        ;;
    "stop")
        stop_services
        ;;
    "logs")
        show_logs "$PROFILE"
        ;;
    "update")
        update_stage0
        ;;
    "clean")
        clean_up
        ;;
    "version")
        echo "v1.0.0"
        ;;
    "list-profiles")
        list_profiles
        ;;
    "list-services")
        list_services
        ;;
    "manual")
        manual
        ;;
    "uninstall")
        uninstall
        ;;
    *)
        usage
        exit 1
        ;;
esac

exit 0

